/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var profile = require("../../util/profile");
















var utils = require("../../util/utils");

var WebsitesClient = require("./websites/websitesclient");
var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;
  var site = cli.category("site");
  var siteScale = site.category("scale").description($("Commands to manage your Web Site scaling"));


  siteScale.command("mode [mode] [name]").description($("Set the web site mode")).usage("[options] <mode> [name]").option("--mode <mode>", $("the mode of the site (available are: free, shared and standard)")).option("--slot <slot>", $("the name of the slot")).option("-s, --subscription <id>", $("the subscription id")).execute(function __1(mode, name, options, _) { var parsedSiteName, context, siteConfigurations, service, progress; var __frame = { name: "__1", line: 35 }; return __func(_, this, arguments, __1, 3, __frame, function __$__1() {






      return cli.interaction.chooseIfNotGiven($("Mode: "), $("Getting modes"), mode, function(cb) {

        cb(null, ["Free","Shared","Standard",]); }, __cb(_, __frame, 1, 13, function ___(__0, __1) { mode = __1;


        parsedSiteName = WebsitesClient.parseSiteName(name);
        context = {
          subscription: profile.current.getSubscription(options.subscription).id,
          site: {
            name: parsedSiteName.name,
            slot: (options.slot ? options.slot : parsedSiteName.slot) } };



        return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 15, 6, function __$__1() {
          siteConfigurations = { };

          service = createWebsiteManagementService(context.subscription); return (function __$__1(__break) {

            switch (mode.toLowerCase()) {
            case "free": siteConfigurations.computeMode = "Shared";
              siteConfigurations.siteMode = "Limited";
              return __break();

            case "shared": siteConfigurations.computeMode = "Shared";
              siteConfigurations.siteMode = "Basic";
              return __break();

            case "standard": return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() { return service.serverFarms.get(context.site.webspace, "DefaultServerFarm", __cb(_, __frame, 31, 10, __then, true));

                  }); })(function ___(err, __result) { __tryCatch(_, function __$__1() { if (err) { return (function __$__1(__then) { if ((err && (err.code === "NotFound"))) {

                          return service.serverFarms.create(context.site.webspace, {
                            numberOfWorkers: 1,

                            workerSize: "Small"
                          }, __cb(_, __frame, 34, 12, __then, true)); } else { return _(err);


                        } ; })(__then); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$__1() { siteConfigurations.computeMode = "Dedicated";



                  siteConfigurations.serverFarm = "DefaultServerFarm";
                  siteConfigurations.siteMode = "Basic";
                  return __break(); }); }); default:

              return _(new Error($("Valid modes are: 'free', 'shared' and 'standard'")));
            }; })(function __$__1() {


            progress = cli.interaction.progress($("Updating a site configuration")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                  return service.webSites.update(context.site.webspace, context.site.name, siteConfigurations, __cb(_, __frame, 54, 8, function __$__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); }, true)); }, true)); }); });



  siteScale.command("instances [instances] [name]").description($("Set the web site number of instances")).usage("[options] <instances> [name]").option("--instances <instances>", $("the number of instances")).option("--size <size>", $("the size of the instances (available are: small, medium and large)")).option("--slot <slot>", $("the name of the slot")).option("-s, --subscription <id>", $("the subscription id")).execute(function __2(instances, name, options, _) { var parsedSiteName, context, service, siteConfigurations, progress; var __frame = { name: "__2", line: 102 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {







      return cli.interaction.promptIfNotGiven($("Number of instances: "), instances, __cb(_, __frame, 1, 18, function ___(__0, __1) { instances = __1;

        parsedSiteName = WebsitesClient.parseSiteName(name);
        context = {
          subscription: profile.current.getSubscription(options.subscription).id,
          site: {
            name: parsedSiteName.name,
            slot: (options.slot ? options.slot : parsedSiteName.slot) } };



        service = createWebsiteManagementService(context.subscription);

        return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 14, 6, function __$__2() {
          return site.doSiteGet(context, __cb(_, __frame, 15, 31, function ___(__0, __2) { siteConfigurations = __2;

            if ((siteConfigurations.computeMode !== "Dedicated")) {
              return _(new Error($("Instances can only be changed for sites in standard mode"))); } ;


            if ((options.size !== undefined)) {
              switch (options.size.toLowerCase()) {
              case "small": options.size = "Small";
                break;
              case "medium":
                options.size = "Medium";
                break;
              case "large":
                options.size = "Large";
                break;
                default:
                return _(new Error($("Available instance sizes are: Small, Medium or Large")));
              }; } ;



            progress = cli.interaction.progress($("Updating a server farm")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                  return service.serverFarms.update(context.site.webspace, {
                    numberOfWorkers: instances,
                    workerSize: ((options.size !== undefined) ? options.size : "Small") }, __cb(_, __frame, 39, 8, function __$__2() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }, true)); }, true)); }, true)); }); });



  function createWebsiteManagementService(subscription) {
    return utils._createWebsiteClient(profile.current.getSubscription(subscription), log); };};
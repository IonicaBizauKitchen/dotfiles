/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; var path = require("path");
















var fs = require("fs");

var util = require("util");

var profile = require("../../util/profile");
var utils = require("../../util/utils");
var WebsitesClient = require("./websites/websitesclient");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;
  var site = cli.category("site");
  var siteCertificates = site.category("cert").description($("Commands to manage your Web Site certificates"));


  siteCertificates.command("list [name]").usage("[options] [name]").description($("Show your site certificates")).option("--slot <slot>", $("the name of the slot")).option("-s, --subscription <id>", $("the subscription id")).execute(function __1(name, options, _) { var parsedSiteName, context, siteConfigurations; var __frame = { name: "__1", line: 39 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {





      parsedSiteName = WebsitesClient.parseSiteName(name);
      context = {
        subscription: profile.current.getSubscription(options.subscription).id,
        site: {
          name: parsedSiteName.name,
          slot: (options.slot ? options.slot : parsedSiteName.slot) } };



      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 10, 6, function __$__1() {

        return site.doSiteGet(context, __cb(_, __frame, 12, 31, function ___(__0, __1) { siteConfigurations = __1;
          cli.interaction.formatOutput(siteConfigurations.sslCertificates, function(data) {
            if ((data.length > 0)) {
              log.table(data, function(row, item) {
                row.cell($("Subject"), item.subjectName);
                row.cell($("Expiration Date"), item.expirationDate);
                row.cell($("Thumbprint"), item.thumbprint); }); }

             else {
              log.info($("No certificates defined yet")); } ; }); _(); }, true)); }, true)); }); });




  siteCertificates.command("add [certificate-path] [name]").usage("[options] <certificate-path> [name]").description($("Add a site certificate in pfx format")).option("--slot <slot>", $("the name of the slot")).option("-c, --certificate-path <certificate-path>", $("the certificate path")).option("-k, --key <key>", $("the certificate key")).option("-s, --subscription <id>", $("the subscription id")).execute(function __2(certificatePath, name, options, _) { var parsedSiteName, context, siteConfigurations, certificateContent, newCertificate; var __frame = { name: "__2", line: 72 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {







      return cli.interaction.promptIfNotGiven($("Certificate path: "), certificatePath, __cb(_, __frame, 1, 24, function ___(__0, __1) { certificatePath = __1;

        if (!fs.existsSync(certificatePath)) {
          return _(new Error(util.format($("Invalid certificate file path %s"), certificatePath))); } ;


        if ((path.extname(certificatePath) !== ".pfx")) {
          return _(new Error($("Only pfx certificates are supported"))); } ;


        return cli.interaction.promptPasswordOnceIfNotGiven($("Certificate key: "), options.key, __cb(_, __frame, 11, 12, function ___(__0, __2) { key = __2;

          parsedSiteName = WebsitesClient.parseSiteName(name);
          context = {
            subscription: profile.current.getSubscription(options.subscription).id,
            site: {
              name: parsedSiteName.name,
              slot: (options.slot ? options.slot : parsedSiteName.slot) } };



          return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 22, 6, function __$__2() {

            return site.doSiteGet(context, __cb(_, __frame, 24, 31, function ___(__0, __3) { siteConfigurations = __3;
              return fs.readFile(certificatePath, __cb(_, __frame, 25, 31, function ___(__0, __4) { certificateContent = __4;

                newCertificate = {
                  password: key,
                  pfxBlob: certificateContent };


                siteConfigurations.sslCertificates.push(newCertificate);

                return site.doSitePUT(context, {
                  sslCertificates: siteConfigurations.sslCertificates }, __cb(_, __frame, 34, 6, _, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });



  siteCertificates.command("delete [thumbprint] [name]").usage("[options] <thumbprint> [name]").description($("Delete a site certificate")).option("--slot <slot>", $("the name of the slot")).option("-t, --thumbprint <thumbprint>", $("the certificate thumbprint")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(function __3(thumbprint, name, options, _) { var parsedSiteName, context, siteConfigurations, match; var __frame = { name: "__3", line: 118 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {







      return cli.interaction.promptIfNotGiven($("Certificate thumbprint: "), thumbprint, __cb(_, __frame, 1, 19, function ___(__0, __2) { thumbprint = __2;

        parsedSiteName = WebsitesClient.parseSiteName(name);
        context = {
          subscription: profile.current.getSubscription(options.subscription).id,
          site: {
            name: parsedSiteName.name,
            slot: (options.slot ? options.slot : parsedSiteName.slot) } };



        return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 12, 6, function __$__3() {

          return site.doSiteGet(context, __cb(_, __frame, 14, 31, function ___(__0, __3) { siteConfigurations = __3;


            match = siteConfigurations.sslCertificates.filter(function(c) { return utils.ignoreCaseEquals(c.thumbprint, thumbprint); })[0]; return (function __$__3(__then) {

              if (match) { return (function __$__3(_) {
                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete certificate with subject %s? [y/n] "), match.subjectName), __cb(_, __frame, 20, 31, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -117, 18, function ___(__0, __4) { return (function __$__3(__then) { if (__4) { return _(null); } else { __then(); } ; })(function __$__3() {



                    match.isToBeDeleted = "true";

                    return site.doSitePUT(context, {
                      sslCertificates: siteConfigurations.sslCertificates }, __cb(_, __frame, 26, 8, __then, true)); }); }, true)); } else {


                return _(new Error(util.format("Certificate with thumbprint \"%s\" does not exist.", thumbprint))); } ; })(_); }, true)); }, true)); }, true)); }); });



  siteCertificates.command("show [thumbprint] [name]").usage("[options] <thumbprint> [name]").description($("Show a site certificate")).option("--slot <slot>", $("the name of the slot")).option("-t, --thumbprint <thumbprint>", $("the certificate thumbprint")).option("-s, --subscription <id>", $("the subscription id")).execute(function __4(thumbprint, name, options, _) { var parsedSiteName, context, siteConfigurations, match; var __frame = { name: "__4", line: 158 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {






      return cli.interaction.promptIfNotGiven($("Certificate thumbprint: "), thumbprint, __cb(_, __frame, 1, 19, function ___(__0, __1) { thumbprint = __1;

        parsedSiteName = WebsitesClient.parseSiteName(name);
        context = {
          subscription: profile.current.getSubscription(options.subscription).id,
          site: {
            name: parsedSiteName.name,
            slot: (options.slot ? options.slot : parsedSiteName.slot) } };



        return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 12, 6, function __$__4() {

          return site.doSiteGet(context, __cb(_, __frame, 14, 31, function ___(__0, __2) { siteConfigurations = __2;



            match = siteConfigurations.sslCertificates.filter(function(c) { return utils.ignoreCaseEquals(c.thumbprint, thumbprint); })[0];

            if (match) {
              cli.interaction.formatOutput(match, function(data) {
                cli.interaction.logEachData($("Certificate"), data); }); }

             else {
              return _(new Error(util.format($("Certificate with thumbprint \"%s\" does not exist."), thumbprint))); } ; _(); }, true)); }, true)); }, true)); }); });};
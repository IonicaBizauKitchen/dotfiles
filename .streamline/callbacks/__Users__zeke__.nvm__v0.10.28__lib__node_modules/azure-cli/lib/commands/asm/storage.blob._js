/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var azure = require("azure");
















var StorageUtil = require("../../util/storage.util");
var util = require("util");
var utils = require("../../util/utils");
var validation = require("../../util/validation");
var commander = require("commander");
var url = require("url");
var fs = require("fs");
var path = require("path");
var Wildcard = utils.Wildcard;
var performStorageOperation = StorageUtil.performStorageOperation;
var startProgress = StorageUtil.startProgress;
var endProgress = StorageUtil.endProgress;
var setOperationTimeout = StorageUtil.setOperationTimeout;
var BlobConstants = azure.Constants.BlobConstants;
var SpeedSummary = azure.BlobService.SpeedSummary;

var $ = utils.getLocaleString;




commander.Command.prototype.addStorageAccountOption = function() {
  this.option("-a, --account-name <accountName>", $("the storage account name"));
  this.option("-k, --account-key <accountKey>", $("the storage account key"));
  this.option("-c, --connection-string <connectionString>", $("the storage connection string"));
  this.option("--debug", $("run storage command in debug mode"));
  return this;};





exports.init = function(cli) {


  StorageUtil.init(cli);




  var storage = cli.category("storage").description($("Commands to manage your Storage objects"));


  var logger = cli.output;

  var container = storage.category("container").description($("Commands to manage your Storage container"));


  container.command("list [prefix]").description($("List storage containers with wildcard")).option("-p, --prefix <prefix>", $("the storage container name prefix")).addStorageAccountOption().execute(listAzureContainersWithAcl);





  container.command("show [container]").description($("Show details of the specified storage container")).option("--container <container>", $("the storage container name")).addStorageAccountOption().execute(showAzureContainer);





  container.command("create [container]").description($("Create a storage container")).option("--container <container>", $("the storage container name")).option("-p, --permission <permission>", $("the storage container ACL permission(Off/Blob/Container)")).addStorageAccountOption().execute(createAzureContainer);






  container.command("delete [container]").description($("Delete the specified storage container")).option("--container <container>", $("the storage container name")).option("-q, --quiet", $("remove the specified Storage container without confirmation")).addStorageAccountOption().execute(deleteAzureContainer);






  container.command("set [container]").description($("Set storage container ACL")).option("--container <container>", $("the storage container name")).option("-p, --permission <permission>", $("the storage container ACL permission(Off/Blob/Container)")).addStorageAccountOption().execute(setAzureContainer);






  var blob = storage.category("blob").description($("Commands to manage your Storage blob"));


  blob.command("list [container] [prefix]").usage("[options] [container] [prefix]").description($("List storage blob in the specified storage container use wildcard and blob name prefix")).option("--container <container>", $("the storage container name")).option("-p, --prefix <prefix>", $("the blob name prefix")).addStorageAccountOption().execute(listAzureBlob);







  blob.command("show [container] [blob]").usage("[options] [container] [blob]").description($("Show details of the specified storage blob")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).addStorageAccountOption().execute(showAzureBlob);







  blob.command("delete [container] [blob]").usage("[options] [container] [blob]").description($("Delete the specified storage blob")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("-q, --quiet", $("remove the specified Storage blob without confirmation")).addStorageAccountOption().execute(deleteAzureBlob);











  blob.command("upload [file] [container] [blob]").usage("[options] [file] [container] [blob]").description($("Upload the specified file to storage blob")).option("-f, --file <file>", $("the local file path")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("-t, --blobtype <blobtype>", $("the storage blob type(Page, Block)")).option("-p, --properties <properties>", $("the storage blob properties for uploaded file. Properties are key=value pairs and separated with semicolon(;). Available properties are contentType, contentEncoding, contentLanguage, cacheControl")).option("-m, --metadata <metadata>", $("the storage blob metadata for uploaded file. Metadata are key=value pairs and separated with semicolon(;)")).option("--concurrenttaskcount <concurrenttaskcount>", $("the maximum number of concurrent upload requests")).option("-q, --quiet", $("overwrite the specified Storage blob without confirmation")).addStorageAccountOption().execute(uploadAzureBlob);













  blob.command("download [container] [blob] [destination]").usage("[options] [container] [blob] [destination]").description($("Download the specified storage blob")).option("--container <container>", $("the storage container name")).option("-b, --blob <blobName>", $("the storage blob name")).option("-d, --destination [destination]", $("download destination file or directory path")).option("-m, --checkmd5", $("check md5sum for the downloaded file")).option("--concurrenttaskcount <concurrenttaskcount>", $("the maximum number of concurrent upload requests")).option("-q, --quiet", $("overwrite the destination file without confirmation")).addStorageAccountOption().execute(downloadAzureBlob);




















  var opConcurrency = -1;






  function getStorageBlobOperation(serviceClient, operationName) {
    var operation = new StorageUtil.StorageOperation();
    operation.type = StorageUtil.OperationType.Blob;
    operation.operation = operationName;
    operation.service = serviceClient;
    return operation; };





  function getStorageAccountOptions(options) {
    return {
      accountName: options.accountName,
      accountKey: options.accountKey,
      connectionString: options.connectionString }; };






  function getStorageBlobOperationDefaultOption() {
    var option = { };
    setOperationTimeout(option);
    return option; };





  function getBlobServiceClient(options) {
    var isNameDefined = (options.accountName !== undefined);
    var isKeyDefined = (options.accountKey !== undefined);
    var isConnectionStringDefined = (options.connectionString !== undefined);
    var isAccountDefined = (isNameDefined || isKeyDefined);
    if ((isConnectionStringDefined && isAccountDefined)) {
      throw new Error($("Please only define one of them: 1. --connection-string. 2 --account-name and --account-key")); }
     else {
      var serviceClient = null;
      if (isConnectionStringDefined) {
        serviceClient = StorageUtil.getBlobService(options.connectionString); }
       else if (isAccountDefined) {
        if ((isNameDefined && isKeyDefined)) {
          var connString = util.format("DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s", options.accountName, options.accountKey);
          serviceClient = StorageUtil.getBlobService(connString); }
         else {
          throw new Error($("Please set both --account-name and --account-key")); } ; }

       else {

        serviceClient = StorageUtil.getBlobService(); }  ;

      if ((options.debug === true)) {
        serviceClient.logger.level = azure.Logger.LogLevels.DEBUG; } ;


      applyBlobServicePatch(serviceClient);
      return serviceClient; } ; };






  function addTailSpace(str) {
    if (((str && str.length) && (str[(str.length - 1)] != " "))) {
      str += " "; } ;

    return str; };





  function promptIfNotGiven(label, value, _) { var __frame = { name: "promptIfNotGiven", line: 247 }; return __func(_, this, arguments, promptIfNotGiven, 2, __frame, function __$promptIfNotGiven() {
      label = addTailSpace(label);
      return cli.interaction.promptIfNotGiven(label, value, __cb(_, __frame, 2, 12, function ___(__0, __1) { value = __1;
        return _(null, value); }, true)); }); };





  function confirm(msg, _) { var ok; var __frame = { name: "confirm", line: 256 }; return __func(_, this, arguments, confirm, 1, __frame, function __$confirm() {
      msg = addTailSpace(msg);
      return cli.interaction.confirm(msg, __cb(_, __frame, 2, 13, function ___(__0, __1) { ok = __1;
        if (!ok) {
          logger.warn($("The operation is cancelled")); } ;

        return _(null, ok); }, true)); }); };








  function listAzureContainersWithAcl(prefix, options, _) { var blobService, listOperation, tips, containerOpts, useWildcard, containers; var __frame = { name: "listAzureContainersWithAcl", line: 271 }; return __func(_, this, arguments, listAzureContainersWithAcl, 2, __frame, function __$listAzureContainersWithAcl() {
      blobService = getBlobServiceClient(options);
      listOperation = getStorageBlobOperation(blobService, "listAllContainers");
      tips = $("Getting storage containers");
      containerOpts = getStorageBlobOperationDefaultOption();
      useWildcard = false;
      containerOpts.include = "metadata";

      if (Wildcard.containWildcards(prefix)) {
        containerOpts.prefix = Wildcard.getNonWildcardPrefix(prefix);
        useWildcard = true; }
       else {
        containerOpts.prefix = prefix; } ;


      containers = [];
      startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$listAzureContainersWithAcl() {



            return performStorageOperation(listOperation, __cb(_, __frame, 20, 6, function ___(__0, __2) { return __2.forEach_(__cb(_, __frame, 20, 6, function __$listAzureContainersWithAcl() { _(null, null, true); }, true), opConcurrency, function __1(_, container) { var aclOperation, aclOptions, permission, level; var __frame = { name: "__1", line: 291 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {

                  if ((useWildcard && !Wildcard.isMatch(container.name, prefix))) { return _(null); } ;


                  containers.push(container);
                  aclOperation = getStorageBlobOperation(blobService, "getContainerAcl");
                  aclOptions = { };
                  setOperationTimeout(aclOptions); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

                        return performStorageOperation(aclOperation, __cb(_, __frame, 10, 27, function ___(__0, __1) { permission = __1;
                          level = StorageUtil.containerAccessLevelToString(permission.publicAccessLevel);
                          container.publicAccessLevel = level; __then(); }, true), container.name, aclOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$__1() { if (e) {

                          logger.warn((e.message || e)); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); }); }, true), containerOpts); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$listAzureContainersWithAcl() {



              endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$listAzureContainersWithAcl() {


          cli.interaction.formatOutput(containers, function(outputData) {
            if ((outputData.length === 0)) {
              logger.info($("No containers found")); }
             else {
              logger.table(outputData, function(row, item) {
                row.cell($("Name"), item.name);
                row.cell($("Public-Access"), item.publicAccessLevel);
                row.cell($("Last-Modified"), item.properties["last-modified"]); }); } ; }); _(); }); }); }); };









  function showAzureContainer(container, options, _) { var blobService, propertiesOperation, tips, showOptions, aclOperation, properties, permission, level; var __frame = { name: "showAzureContainer", line: 329 }; return __func(_, this, arguments, showAzureContainer, 2, __frame, function __$showAzureContainer() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 16, function ___(__0, __1) { container = __1;
        propertiesOperation = getStorageBlobOperation(blobService, "getContainerProperties");
        tips = $("Getting Storage container information");
        showOptions = getStorageBlobOperationDefaultOption();
        aclOperation = getStorageBlobOperation(blobService, "getContainerAcl");
        properties = { };

        startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$showAzureContainer() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$showAzureContainer() {



                    return performStorageOperation(propertiesOperation, __cb(_, __frame, 13, 19, function ___(__0, __2) { properties = __2;
                      return performStorageOperation(aclOperation, __cb(_, __frame, 14, 23, function ___(__0, __3) { permission = __3;
                        level = StorageUtil.containerAccessLevelToString(permission.publicAccessLevel);
                        properties.publicAccessLevel = level; __then(); }, true), container, showOptions); }, true), container, showOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$showAzureContainer() { if (e) {

                      if (StorageUtil.isNotFoundException(e)) {
                        return _(new Error(util.format($("Container %s doesn't exist"), container))); }
                       else {
                        return _(e); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$showAzureContainer() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$showAzureContainer() {


                endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$showAzureContainer() {


            logger.json(properties); _(); }); }); }, true)); }); };






  function createAzureContainer(container, options, _) { var blobService, operation, tips, storageOptions, permission, created, aclOperation, accessLevel; var __frame = { name: "createAzureContainer", line: 363 }; return __func(_, this, arguments, createAzureContainer, 2, __frame, function __$createAzureContainer() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 16, function ___(__0, __1) { container = __1;
        operation = getStorageBlobOperation(blobService, "createContainerIfNotExists");
        tips = util.format($("Creating storage container %s"), container);
        storageOptions = getStorageBlobOperationDefaultOption();
        permission = options.permission;
        if (permission) {
          validation.isValidEnumValue(permission, Object.keys(BlobConstants.BlobContainerPublicAccessType)); } ;


        startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$createAzureContainer() {

              return performStorageOperation(operation, __cb(_, __frame, 13, 20, function ___(__0, __2) { created = __2; return (function __$createAzureContainer(__then) {
                  if ((created === false)) {
                    return _(new Error(util.format($("Container '%s' already exists"), container))); } else { return (function __$createAzureContainer(__then) {
                      if (permission) {
                        aclOperation = getStorageBlobOperation(blobService, "setContainerAcl");
                        accessLevel = StorageUtil.stringToContainerAccessLevel(permission);
                        return performStorageOperation(aclOperation, __cb(_, __frame, 19, 8, __then, true), container, accessLevel, storageOptions); } else { __then(); } ; })(__then); } ; })(function __$createAzureContainer() { _(null, null, true); }); }, true), container, storageOptions); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$createAzureContainer() {


                endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$createAzureContainer() {


            logger.verbose(util.format($("Container %s created successfully"), container));
            return showAzureContainer(container, getStorageAccountOptions(options), __cb(_, __frame, 26, 4, _, true)); }); }); }, true)); }); };





  function deleteAzureContainer(container, options, _) { var blobService, tips, operation, storageOptions, force; var __frame = { name: "deleteAzureContainer", line: 395 }; return __func(_, this, arguments, deleteAzureContainer, 2, __frame, function __$deleteAzureContainer() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name: "), container, __cb(_, __frame, 2, 16, function ___(__0, __1) { container = __1;
        tips = util.format($("Deleting Container %s"), container);
        operation = getStorageBlobOperation(blobService, "deleteContainer");
        storageOptions = getStorageBlobOperationDefaultOption();
        force = !!options.quiet; return (function __$deleteAzureContainer(__then) {

          if ((force !== true)) {
            return confirm(util.format($("Do you want to remove the storage container %s?"), container), __cb(_, __frame, 9, 14, function ___(__0, __2) { force = __2;
              if ((force !== true)) { return _(null); } ; __then(); }, true)); } else { __then(); } ; })(function __$deleteAzureContainer() {




          startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteAzureContainer() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteAzureContainer() {


                      return performStorageOperation(operation, __cb(_, __frame, 18, 6, __then, true), container, storageOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$deleteAzureContainer() { if (e) {

                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Can not find container '%s'"), container))); }
                         else {
                          return _(e); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$deleteAzureContainer() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$deleteAzureContainer() {


                  endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$deleteAzureContainer() {


              logger.info(util.format($("Container %s deleted successfully"), container)); _(); }); }); }); }, true)); }); };





  function setAzureContainer(container, options, _) { var blobService, tips; var __frame = { name: "setAzureContainer", line: 430 }; return __func(_, this, arguments, setAzureContainer, 2, __frame, function __$setAzureContainer() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven("Container name: ", container, __cb(_, __frame, 2, 16, function ___(__0, __1) { container = __1;
        tips = "Set container";
        startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$setAzureContainer() { return (function __$setAzureContainer(__then) {


                if (options.permission) {
                  return setAzureContainerAcl(blobService, container, options.permission, __cb(_, __frame, 8, 8, __then, true)); } else { __then(); } ; })(function __$setAzureContainer() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$setAzureContainer() {


                endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$setAzureContainer() {

            return showAzureContainer(container, getStorageAccountOptions(options), __cb(_, __frame, 13, 4, _, true)); }); }); }, true)); }); };





  function setAzureContainerAcl(blobService, container, permission, _) { var operation, storageOptions, accessLevel; var __frame = { name: "setAzureContainerAcl", line: 449 }; return __func(_, this, arguments, setAzureContainerAcl, 3, __frame, function __$setAzureContainerAcl() {
      operation = getStorageBlobOperation(blobService, "setContainerAcl");
      storageOptions = getStorageBlobOperationDefaultOption();
      validation.isValidEnumValue(permission, Object.keys(BlobConstants.BlobContainerPublicAccessType));
      accessLevel = StorageUtil.stringToContainerAccessLevel(permission);
      return performStorageOperation(operation, __cb(_, __frame, 5, 4, _, true), container, accessLevel, storageOptions); }); };





  function listAzureBlob(container, blobName, options, _) { var blobService, specifiedContainerName, tips, operation, storageOptions, useWildcard, inputBlobName, blobs, outputBlobs, i, len, blob; var __frame = { name: "listAzureBlob", line: 460 }; return __func(_, this, arguments, listAzureBlob, 3, __frame, function __$listAzureBlob() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name:"), container, __cb(_, __frame, 2, 33, function ___(__0, __1) { specifiedContainerName = __1;
        tips = util.format($("Getting blobs in container %s"), specifiedContainerName);
        operation = getStorageBlobOperation(blobService, "listAllBlobs");
        storageOptions = getStorageBlobOperationDefaultOption();
        useWildcard = false;
        inputBlobName = blobName;
        if (Wildcard.containWildcards(inputBlobName)) {
          storageOptions.prefix = Wildcard.getNonWildcardPrefix(inputBlobName);
          useWildcard = true; }
         else {
          storageOptions.prefix = inputBlobName; } ;

        storageOptions.include = "snapshots,metadata,copy";
        blobs = [];

        startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$listAzureBlob() {


              return performStorageOperation(operation, __cb(_, __frame, 20, 14, function ___(__0, __2) { blobs = __2; _(null, null, true); }, true), specifiedContainerName, storageOptions); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$listAzureBlob() {

                endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$listAzureBlob() {


            outputBlobs = [];

            if (useWildcard) {
              for (i = 0, len = blobs.length; (i < len); i++) {
                blob = blobs[i];
                if (Wildcard.isMatch(blob.name, inputBlobName)) {
                  outputBlobs.push(blob); } ; }; }


             else {
              outputBlobs = blobs; } ;



            cli.interaction.formatOutput(outputBlobs, function(outputData) {
              if ((outputData.length === 0)) {
                logger.info($("No blobs found")); }
               else {
                logger.table(outputData, function(row, item) {
                  row.cell($("Name"), item.name);
                  row.cell($("BlobType"), item.properties.blobtype);
                  row.cell($("Length"), item.properties["content-length"]);
                  row.cell($("Content-Type"), item.properties["content-type"]);
                  row.cell($("Last-Modified"), item.properties["last-modified"]);
                  var uri = url.parse(item.url, true);
                  row.cell($("SnapshotTime"), (uri.query.snapshot || "")); }); } ; }); _(); }); }); }, true)); }); };








  function showAzureBlob(containerName, blobName, options, _) { var blob; var __frame = { name: "showAzureBlob", line: 519 }; return __func(_, this, arguments, showAzureBlob, 3, __frame, function __$showAzureBlob() {
      return getAzureBlobProperties(containerName, blobName, options, __cb(_, __frame, 1, 15, function ___(__0, __1) { blob = __1;
        logBlobProperties(blob); _(); }, true)); }); };





  function logBlobProperties(properties) {
    if (!properties) { return };
    cli.interaction.formatOutput(properties, function(data) {
      var outputProperties = ["container","blob","blobType","contentLength","contentType","contentMD5",];
      var output = outputProperties.map(function(propertyName) { return { property: propertyName, value: data[propertyName] }; });
      logger.table(output, function(row, item) {
        row.cell($("Property"), item.property);
        row.cell($("Value"), item.value); }); }); };







  function getAzureBlobProperties(container, blobName, options, _) { var blobService, specifiedContainerName, specifiedBlobName, storageOptions, blob, propertiesOperation, tips; var __frame = { name: "getAzureBlobProperties", line: 542 }; return __func(_, this, arguments, getAzureBlobProperties, 3, __frame, function __$getAzureBlobProperties() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name:"), container, __cb(_, __frame, 2, 33, function ___(__0, __1) { specifiedContainerName = __1;
        return promptIfNotGiven($("Blob name:"), blobName, __cb(_, __frame, 3, 28, function ___(__0, __2) { specifiedBlobName = __2;
          storageOptions = getStorageBlobOperationDefaultOption();
          blob = { };
          propertiesOperation = getStorageBlobOperation(blobService, "getBlobProperties");
          tips = $("Getting Storage blob information");

          startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getAzureBlobProperties() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getAzureBlobProperties() {


                      return performStorageOperation(propertiesOperation, __cb(_, __frame, 12, 13, function ___(__0, __3) { blob = __3; __then(); }, true), specifiedContainerName, specifiedBlobName, storageOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$getAzureBlobProperties() { if (e) {

                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Blob %s in Container %s doesn't exist"), specifiedBlobName, specifiedContainerName))); }
                         else {
                          return _(e); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$getAzureBlobProperties() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getAzureBlobProperties() {


                  endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getAzureBlobProperties() {

              return _(null, blob); }); }); }, true)); }, true)); }); };





  function deleteAzureBlob(container, blobName, options, _) { var blobService, specifiedContainerName, specifiedBlobName, storageOptions, tips, operation; var __frame = { name: "deleteAzureBlob", line: 570 }; return __func(_, this, arguments, deleteAzureBlob, 3, __frame, function __$deleteAzureBlob() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name:"), container, __cb(_, __frame, 2, 33, function ___(__0, __1) { specifiedContainerName = __1;
        return promptIfNotGiven($("Blob name:"), blobName, __cb(_, __frame, 3, 28, function ___(__0, __2) { specifiedBlobName = __2;
          storageOptions = getStorageBlobOperationDefaultOption();
          tips = util.format($("Deleting Blob %s in container %s"), blobName, container);
          operation = getStorageBlobOperation(blobService, "deleteBlob");
          startProgress(tips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteAzureBlob() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteAzureBlob() {


                      return performStorageOperation(operation, __cb(_, __frame, 10, 6, __then, true), specifiedContainerName, specifiedBlobName, storageOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$deleteAzureBlob() { if (e) {

                        if (StorageUtil.isNotFoundException(e)) {
                          return _(new Error(util.format($("Can not find blob '%s' in container '%s'"), specifiedBlobName, specifiedContainerName))); }
                         else {
                          return _(e); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$deleteAzureBlob() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$deleteAzureBlob() {


                  endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$deleteAzureBlob() {


              logger.info(util.format($("Blob %s deleted successfully"), blobName)); _(); }); }); }, true)); }, true)); }); };





  function uploadAzureBlob(file, container, blobName, options, _) { var blobService, blobTypeName, specifiedContainerName, specifiedFileName, specifiedBlobName, specifiedBlobType, storageOptions, properties, force, summary, fsStatus, tips, blobProperties, propertiesOperation, operation, printer, intervalId; var __frame = { name: "uploadAzureBlob", line: 597 }; return __func(_, this, arguments, uploadAzureBlob, 4, __frame, function __$uploadAzureBlob() {
      blobService = getBlobServiceClient(options);
      blobTypeName = (options.blobtype || "BLOCK");
      validation.isValidEnumValue(blobTypeName, Object.keys(BlobConstants.BlobTypes));
      return promptIfNotGiven($("Container name:"), container, __cb(_, __frame, 4, 33, function ___(__0, __1) { specifiedContainerName = __1;
        return promptIfNotGiven($("File name:"), file, __cb(_, __frame, 5, 28, function ___(__0, __2) { specifiedFileName = __2;
          specifiedBlobName = blobName;
          specifiedBlobType = BlobConstants.BlobTypes[blobTypeName.toUpperCase()];
          storageOptions = getStorageBlobOperationDefaultOption();
          properties = StorageUtil.parseKvParameter(options.properties);
          force = options.quiet;
          storageOptions.metadata = StorageUtil.parseKvParameter(options.metadata);
          storageOptions.setBlobContentMD5 = true;
          StorageUtil.formatBlobProperties(properties, storageOptions);
          summary = new SpeedSummary(specifiedBlobName);
          storageOptions.speedSummary = summary;

          if (!specifiedBlobName) {
            specifiedBlobName = path.basename(specifiedFileName); } ;

          specifiedBlobName = StorageUtil.convertFileNameToBlobName(specifiedBlobName);

          return utils.fileExists(specifiedFileName, __cb(_, __frame, 22, 9, function ___(__0, __4) { var __3 = !__4; return (function __$uploadAzureBlob(__then) { if (__3) {
                return _(new Error(util.format($("Local file %s doesn't exist"), specifiedFileName))); } else { __then(); } ; })(function __$uploadAzureBlob() {

              return fs.stat(specifiedFileName, __cb(_, __frame, 25, 19, function ___(__0, __5) { fsStatus = __5;
                if (!fsStatus.isFile()) {
                  return _(new Error(util.format($("%s is not a file"), specifiedFileName))); } ;

                tips = ""; return (function __$uploadAzureBlob(__then) {
                  if ((force !== true)) {
                    blobProperties = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$uploadAzureBlob() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$uploadAzureBlob() {

                                tips = util.format($("Checking blob %s in container %s"), specifiedBlobName, specifiedContainerName);
                                startProgress(tips);
                                propertiesOperation = getStorageBlobOperation(blobService, "getBlobProperties");
                                return performStorageOperation(propertiesOperation, __cb(_, __frame, 36, 25, function ___(__0, __6) { blobProperties = __6; __then();
                                }, true), specifiedContainerName, specifiedBlobName, storageOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$uploadAzureBlob() { if (e) {

                                  if (!StorageUtil.isNotFoundException(e)) {
                                    return _(e); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$uploadAzureBlob() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$uploadAzureBlob() {


                            endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$uploadAzureBlob() { return (function __$uploadAzureBlob(__then) {


                          if ((blobProperties !== null)) { return (function __$uploadAzureBlob(__then) {
                              if ((blobProperties.blobType !== specifiedBlobType)) {
                                return _(new Error(util.format($("BlobType mismatch. The current blob type is %s"), blobProperties.blobType))); } else {


                                return confirm(util.format($("Do you want to remove the blob %s in container %s?"), specifiedBlobName, specifiedContainerName), __cb(_, __frame, 51, 14, function ___(__0, __8) { var __7 = !__8; return (function __$uploadAzureBlob(__then) { if (__7) { return _(null); } else { __then(); } ; })(__then); }, true)); } ; })(__then); } else { __then(); } ; })(__then); }); }); } else { __then(); } ; })(function __$uploadAzureBlob() {







                  tips = util.format($("Uploading %s to blob %s in container %s"), specifiedFileName, specifiedBlobName, specifiedContainerName);
                  operation = getStorageBlobOperation(blobService, "createBlockBlobFromFile");
                  storageOptions.ParallelOperationThreadCount = options.concurrenttaskcount;
                  printer = getSpeedPrinter(summary);
                  intervalId = -1;
                  if (!logger.format().json) {
                    intervalId = setInterval(printer, 1000); } ;

                  startProgress(tips);
                  endProgress(); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$uploadAzureBlob() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$uploadAzureBlob() { return (function __$uploadAzureBlob(__then) {

                                if ((blobTypeName.toLowerCase() === "page")) {

                                  operation = getStorageBlobOperation(blobService, "createPageBlobFromFile");
                                  return performStorageOperation(operation, __cb(_, __frame, 73, 8, __then, true), specifiedContainerName, specifiedBlobName, specifiedFileName, storageOptions); } else {


                                  operation = getStorageBlobOperation(blobService, "createBlockBlobFromFile");
                                  return performStorageOperation(operation, __cb(_, __frame, 77, 8, __then, true), specifiedContainerName, specifiedBlobName, specifiedFileName, storageOptions); } ; })(__then); }); })(function ___(e, __result) { __tryCatch(_, function __$uploadAzureBlob() { if (e) {


                                printer(true);
                                return _(e); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$uploadAzureBlob() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$uploadAzureBlob() {

                          printer(true);
                          clearInterval(intervalId); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$uploadAzureBlob() {

                      return showAzureBlob(specifiedContainerName, specifiedBlobName, getStorageAccountOptions(options), __cb(_, __frame, 86, 4, _, true)); }); }); }); }, true)); }); }, true)); }, true)); }, true)); }); };





  function downloadAzureBlob(container, blobName, destination, options, _) { var blobService, specifiedContainerName, specifiedFileName, specifiedBlobName, dirName, fileName, isDirectory, force, fsStatus, structure, fullName, tips, storageOptions, operation, summary, printer, intervalId, downloadBlob, calcTips, blobProperties, propertiesOperation, downloadedBlob; var __frame = { name: "downloadAzureBlob", line: 689 }; return __func(_, this, arguments, downloadAzureBlob, 4, __frame, function __$downloadAzureBlob() {
      blobService = getBlobServiceClient(options);
      return promptIfNotGiven($("Container name:"), container, __cb(_, __frame, 2, 33, function ___(__0, __2) { specifiedContainerName = __2;

        specifiedFileName = (destination || ".");
        return promptIfNotGiven($("Blob name:"), blobName, __cb(_, __frame, 5, 28, function ___(__0, __3) { specifiedBlobName = __3;
          dirName = "";
          fileName = "";
          isDirectory = false;
          force = options.quiet; return (function __$downloadAzureBlob(__then) {
            if (utils.pathExistsSync(specifiedFileName)) {
              return fs.stat(specifiedFileName, __cb(_, __frame, 11, 21, function ___(__0, __4) { fsStatus = __4;
                isDirectory = fsStatus.isDirectory(); __then(); }, true)); } else {

              if (((specifiedFileName === ".") || ((specifiedFileName.length && (specifiedFileName[(specifiedFileName.length - 1)] === path.sep))))) {

                isDirectory = true; } ; __then(); } ; })(function __$downloadAzureBlob() {



            if (isDirectory) {
              dirName = specifiedFileName;
              fileName = ""; }
             else {
              fileName = path.basename(specifiedFileName);
              dirName = path.dirname(specifiedFileName); } ;


            return utils.fileExists(dirName, __cb(_, __frame, 28, 9, function ___(__0, __6) { var __5 = !__6; return (function __$downloadAzureBlob(__then) { if (__5) {
                  return _(new Error(util.format($("Local directory %s doesn't exist"), dirName))); } else { __then(); } ; })(function __$downloadAzureBlob() {


                if (!fileName) {
                  structure = StorageUtil.getStructureFromBlobName(specifiedBlobName);
                  fileName = structure.fileName;
                  fileName = utils.escapeFilePath(fileName);
                  structure.dirName = StorageUtil.recursiveMkdir(dirName, structure.dirName);
                  fileName = path.join(structure.dirName, fileName);
                  dirName = "."; } ;


                fullName = path.join(dirName, fileName); return (function __$downloadAzureBlob(_) {
                  var __1 = (force !== true); if (!__1) { return _(null, __1); } ; return utils.fileExists(fullName, __cb(_, __frame, 42, 26, _, true)); })(__cb(_, __frame, -688, 18, function ___(__0, __7) { return (function __$downloadAzureBlob(__then) { if (__7) {
                      return confirm(util.format($("Do you want to overwrite %s?"), fullName), __cb(_, __frame, 43, 10, function ___(__0, __9) { var __8 = !__9; return (function __$downloadAzureBlob(__then) { if (__8) { return _(null); } else { __then(); } ; })(__then); }, true)); } else { __then(); } ; })(function __$downloadAzureBlob() {



                    tips = util.format($("Download blob %s in container %s to %s"), specifiedBlobName, specifiedContainerName, fullName);
                    storageOptions = getStorageBlobOperationDefaultOption();
                    operation = getStorageBlobOperation(blobService, "getBlobToFile");
                    storageOptions.ParallelOperationThreadCount = options.concurrenttaskcount;
                    summary = new SpeedSummary(specifiedBlobName);
                    storageOptions.speedSummary = summary;
                    storageOptions.checkMD5sum = options.checkmd5;

                    startProgress(tips);
                    endProgress();
                    printer = getSpeedPrinter(summary);
                    intervalId = -1;
                    if (!logger.format().json) {
                      intervalId = setInterval(printer, 1000); } ;

                    downloadBlob = { }; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$downloadAzureBlob() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$downloadAzureBlob() {

                                return performStorageOperation(operation, __cb(_, __frame, 64, 21, function ___(__0, __10) { downloadBlob = __10; __then(); }, true), specifiedContainerName, specifiedBlobName, fullName, storageOptions); }); })(function ___(e, __result) { __tryCatch(_, function __$downloadAzureBlob() { if (e) {

                                  printer(true);
                                  if (StorageUtil.isNotFoundException(e)) {
                                    return _(new Error(util.format($("Can not find blob '%s' in container '%s'"), specifiedBlobName, specifiedContainerName))); }
                                   else {
                                    return _(e); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$downloadAzureBlob() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$downloadAzureBlob() {


                            printer(true);
                            clearInterval(intervalId); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$downloadAzureBlob() { return (function __$downloadAzureBlob(__then) {


                          if (options.checkmd5) {
                            calcTips = $("Calculating content md5");
                            blobProperties = { };
                            startProgress(calcTips); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$downloadAzureBlob() {

                                  propertiesOperation = getStorageBlobOperation(blobService, "getBlobProperties");
                                  return performStorageOperation(propertiesOperation, __cb(_, __frame, 83, 25, function ___(__0, __11) { blobProperties = __11; _(null, null, true);
                                  }, true), specifiedContainerName, specifiedBlobName, storageOptions); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$downloadAzureBlob() {

                                    endProgress(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$downloadAzureBlob() {


                                if (!blobProperties.contentMD5) {
                                  logger.warn(util.format($("Blob contentMd5 is missing, and the local file md5 is %s"), downloadBlob.clientSideContentMD5)); }
                                 else {
                                  if ((blobProperties.contentMD5 === downloadBlob.clientSideContentMD5)) {
                                    logger.info(util.format($("Md5checksum validation passed, and md5checksum is %s"), downloadBlob.clientSideContentMD5)); }
                                   else {
                                    return _(new Error(util.format($("Md5checksum validation failed. Blob md5 is %s, but local file md5 is %s"), blobProperties.contentMD5, downloadBlob.clientSideContentMD5))); } ; } ; __then(); }); }); } else { __then(); } ; })(function __$downloadAzureBlob() {



                          return getAzureBlobProperties(specifiedContainerName, specifiedBlobName, getStorageAccountOptions(options), __cb(_, __frame, 99, 25, function ___(__0, __12) { downloadedBlob = __12;
                            if (downloadedBlob) {
                              downloadedBlob["fileName"] = fullName; } ;


                            cli.interaction.formatOutput(downloadedBlob, function(data) {
                              logger.info(util.format($("File saved as %s"), data.fileName)); }); _(); }, true)); }); }); }); }); }, true)); }); }, true)); }); }, true)); }, true)); }); };






  function getSpeedPrinter(summary) {
    var clearBuffer = new Buffer(79, "utf8");
    clearBuffer.fill(" ");
    clearBuffer = clearBuffer.toString();
    var done = false;
    return function(newline) {
      if ((logger.format().json || done)) { return };
      var tips = util.format($("Percentage: %s%% (%s/%s) Average Speed: %s Elapsed Time: %s "), summary.getCompletePercent(), summary.getCompleteSize(), summary.getTotalSize(), summary.getAverageSpeed(), summary.getElapsedSeconds());

      fs.writeSync(1, (("\r" + clearBuffer) + "\r"));
      process.stdout.write(tips);
      if (newline) {
        process.stdout.write("\n");
        done = true; } ; }; };







  function applyBlobServicePatch(blobService) {
    var self = blobService;





    blobService.listAllContainers = function(options, callback) {
      listWithContinuation(blobService.listContainers, options, callback); };






    blobService.listAllBlobs = function(container, options, callback) {
      listWithContinuation(blobService.listBlobs, container, options, callback); };





    function listWithContinuation(listFunc) {
      var allItems = [];
      function listCallback(error, items, resultContinuation) {
        if (error) { throw error };
        allItems = allItems.concat(items);
        if ((resultContinuation && resultContinuation.hasNextPage())) {
          resultContinuation.getNextPage(listCallback); }
         else {
          callback(error, allItems);
          allItems = blobs = null; } ; };


      var callback = arguments[(arguments.length - 1)];
      var callArguments = Array.prototype.slice.call(arguments).slice(1, (arguments.length - 1));
      callArguments.push(listCallback);
      listFunc.apply(self, callArguments); }; };};
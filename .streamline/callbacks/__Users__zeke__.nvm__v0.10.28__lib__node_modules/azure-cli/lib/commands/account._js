/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var __ = require("underscore");



















var util = require("util");
var wrap = require("wordwrap").hard(0, 75);

var tokenCache = require("../util/authentication/adalAuth").tokenCache;
var profile = require("../util/profile");
var utils = require("../util/utils");

var $ = utils.getLocaleString;

var AccountClient = require("./account/accountclient");

exports.init = function(cli) {
  var log = cli.output;

  var account = cli.category("account").description($("Commands to manage your account information and publish settings"));


  var accountClient = new AccountClient(cli);

  account.command("download").description($("Launch a browser to download your publishsettings file")).option("-e, --environment <environment>", $("the publish settings download environment")).option("-r, --realm <realm>", $("the organization's realm")).execute(function __1(options, _) { var url; var __frame = { name: "__1", line: 44 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {




      url = profile.current.getEnvironment(options.environment).getPublishingProfileUrl(options.realm);
      return cli.interaction.launchBrowser(url, __cb(_, __frame, 2, 6, function __$__1() {
        log.help($("Save the downloaded file, then execute the command"));
        log.help($("  account import <file>")); _(); }, true)); }); });


  account.command("list").description($("List the imported subscriptions")).execute(function __2(options, _) { var subscriptions; var __frame = { name: "__2", line: 53 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() {


      subscriptions = __.values(profile.current.subscriptions);

      log.table(subscriptions, function(row, s) {
        row.cell($("Name"), s.name);
        row.cell($("Id"), s.id);
        row.cell($("Current"), s.isDefault); }); _(); }); });



  account.command("show [subscription]").description($("Show details about a subscription")).option("-s --subscription <subscription>", $("The subscription to show")).option("-d --details", $("Show extra information about the subscription")).execute(function __3(subscription, options, _) { var sub, format, detailsFormat; var __frame = { name: "__3", line: 67 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() {




      sub = profile.current.getSubscription(subscription);
      format = [[$("Name"),"name",],[$("ID"),"id",],[$("Is Default"),"isDefault",],[$("Environment"),"environment.name",],[$("Has Certificate"),null,function(value) {





        if (value.managementCertificate) {
          return $("Yes"); } ;

        return $("No");

      },],[$("Has Access Token"),null,function(value) {
        if (value.username) {
          return $("Yes"); } ;

        return $("No");

      },],[$("User name"),"username",],];


      detailsFormat = [[$("Registered ASM Providers"),"registeredProviders",],[$("Registered ARM Namespaces"),"registeredResourceNamespaces",],];




      log.report(format.concat((options.details ? detailsFormat : [])), sub); _(); }); });


  account.command("set <subscription>").description($("Set the current subscription")).execute(function __4(subscription, options, _) { var newSubscription; var __frame = { name: "__4", line: 99 }; return __func(_, this, arguments, __4, 2, __frame, function __$__4() {


      newSubscription = profile.current.getSubscription(subscription);
      if (!newSubscription) {
        return _(new Error(util.format($("Invalid subscription \"%s\""), subscription))); } ;

      log.info(util.format($("Setting subscription to \"%s\""), subscription));
      profile.current.currentSubscription = newSubscription;
      profile.current.save();
      log.info($("Changes saved")); _(); }); });


  account.command("import <file>").description($("Import a publishsettings file or certificate for your account")).option("--skipregister", $("skip registering resources")).execute(function __5(file, options, _) { var __frame = { name: "__5", line: 113 }; return __func(_, this, arguments, __5, 2, __frame, function __$__5() {



      profile.current.importPublishSettings(file);
      profile.current.save(); _(); }); });


  account.command("clear").description($("Remove a subscription or environment, or clear all of the stored account and environment info")).option("-s --subscription <subscriptionNameOrId>", $("Subscription name or id to remove")).option("-e --environment <environmentName>", $("Environment name to remove")).option("-q --quiet", $("quiet mode, do not ask for delete confirmation")).execute(function __6(options, _) { var matchSubscription, matchEnvironment, clearAll, shouldClear; var __frame = { name: "__6", line: 123 }; return __func(_, this, arguments, __6, 1, __frame, function __$__6() {





      matchSubscription = function() { return false; };
      matchEnvironment = function() { return false; };
      clearAll = false; return (function __$__6(__then) {

        if ((!options.subscription && !options.environment)) {
          clearAll = true; return (function __$__6(_) {
            var __1 = options.quiet; if (__1) { return _(null, __1); } ; return cli.interaction.confirm($("This will clear all account information. Are you sure? "), __cb(_, __frame, 7, 43, _, true)); })(__cb(_, __frame, -122, 18, function ___(__0, __2) { shouldClear = __2;
            if (!shouldClear) { return _(null); } ;


            matchSubscription = function() { return true; };
            matchEnvironment = function() { return true; }; __then(); }, true)); } else {

          if (options.subscription) {
            matchSubscription = function(s) {
              return ((s.id === options.subscription) || utils.ignoreCaseEquals(s.name, options.subscription)); }; } ;


          if (options.environment) {
            matchEnvironment = function(e) {
              return utils.ignoreCaseEquals(e.name, options.environment); }; } ; __then(); } ; })(function __$__6() {




        __.values(profile.current.subscriptions).filter(matchSubscription).forEach(function(subscription) {


          profile.current.deleteSubscription(subscription.name); });


        __.values(profile.current.environments).filter(matchEnvironment).forEach(function(env) {


          profile.current.deleteEnvironment(env.name); });


        profile.current.save();
        if (clearAll) {
          profile.clearAzureDir(); } ; _(); }); }); });



  cli.command("login").description($("Log in to an Azure subscription using Active Directory")).option("-e --environment [environment]", $("Environment to authenticate against, must support active directory")).option("-u --user <username>", $("user name, will prompt if not given")).option("-p --password <password>", $("user password, will prompt if not given")).option("-q --quiet", $("do not prompt for confirmation of PII storage")).execute(function __7(options, _) { var piiWarningText, environmentName, environment, username, haveSeenBefore, password, progress, newSubscriptions; var __frame = { name: "__7", line: 173 }; return __func(_, this, arguments, __7, 1, __frame, function __$__7() {







      piiWarningText = wrap($(((((("If you choose to continue, Azure command-line interface will cache your " + "authentication information. Note that this sensitive information will be stored in ") + "plain text on the file system of your computer at %s. Ensure that you take suitable ") + "precautions to protect your computer from unauthorized access in order to minimize the ") + "risk of that information being disclosed.") + "\nDo you wish to continue: (y/n) ")));






      environmentName = (options.environment || "AzureCloud");
      environment = profile.current.getEnvironment(environmentName);
      if (!environment) {
        return _(new Error(util.format($("Unknown environment %s"), environmentName))); } ;


      if (!options.hasOwnProperty("password")) {
        options.password = undefined; } ;


      return cli.interaction.promptIfNotGiven("Username: ", options.user, __cb(_, __frame, 19, 21, function ___(__0, __1) { username = __1; return (function __$__7(__then) {

          if (!tokenCache.isSecureCache) {
            haveSeenBefore = __.values(profile.current.subscriptions).some(function(s) {
              return utils.ignoreCaseEquals(username, s.username); }); return (function __$__7(__then) {


              if ((!options.quiet && !haveSeenBefore)) {
                return cli.interaction.confirm(util.format(piiWarningText, profile.defaultProfileFile), __cb(_, __frame, 27, 15, function ___(__0, __3) { var __2 = !__3; return (function __$__7(__then) { if (__2) {
                      log.info($("Login cancelled")); return _(null); } else { __then(); } ; })(__then); }, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$__7() {





          return cli.interaction.promptPasswordOnceIfNotGiven("Password: ", options.password, __cb(_, __frame, 34, 21, function ___(__0, __4) { password = __4;

            progress = cli.interaction.progress($("Authenticating...")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__7() {

                  return environment.addAccount(username, password, __cb(_, __frame, 38, 31, function ___(__0, __5) { newSubscriptions = __5;
                    if ((newSubscriptions.length > 0)) {
                      newSubscriptions[0].isDefault = true;

                      newSubscriptions.forEach(function(s) {
                        profile.current.addSubscription(s);
                        log.info(util.format($("Added subscription %s"), s.name));
                        if (s.isDefault) {
                          log.info(util.format($("Setting subscription %s as default"), s.name)); } ; });


                      profile.current.save(); }
                     else {
                      log.info(util.format($("No subscriptions found for this login"))); } ; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__7() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }, true)); }); }, true)); }); });



  cli.command("logout [username]").description($("Log out from Azure subscription using Active Directory")).option("-u --username <username>", $("Required. User name used to log out from Azure Active Directory.")).execute(function __8(username, options, _) { var __frame = { name: "__8", line: 234 }; return __func(_, this, arguments, __8, 2, __frame, function __$__8() {



      if (!username) {
        return _(null, cli.missingArgument("username")); } ;

      return profile.current.logoutUser(username, __cb(_, __frame, 4, 8, function ___(__0, __1) { return (function __$__8(__then) { if (__1) {
            profile.current.save();
            log.info($("You have logged out.")); __then(); } else {

            log.info(util.format($("You are not logging in as '%s'. Quitting."), username)); __then(); } ; })(_); }, true)); }); });



  account.registerResourceType = function(resourceName) {
    return accountClient.registerResourceType(resourceName); };


  account.knownResourceTypes = function() {
    return accountClient.knownResourceTypes(); };};
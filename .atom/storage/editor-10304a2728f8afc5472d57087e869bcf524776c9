{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/zeke/code/support/runrunitstg","buffers":[{"text":"Runrunit::Application.configure do\n  # Settings specified here will take precedence over those in config/application.rb\n  #\n  # Code is not reloaded between requests\n  config.cache_classes = true\n\n  # Full error reports are disabled and caching is turned on\n  config.consider_all_requests_local       = false\n  config.action_controller.perform_caching = true\n\n  # Disable Rails's static asset server (Apache or nginx will already do this. If only Heroku let us use them.)\n  config.serve_static_assets = true\n\n  # Configure headers for static assets. Cache everything for up to 1 year since we use digests\n  config.static_cache_control = \"public, max-age=31536000\"\n\n  # Compress JavaScripts and CSS\n  config.assets.compress = true\n\n  # Don't fallback to assets pipeline if a precompiled asset is missed\n  config.assets.compile = false\n\n  # Generate digests for assets URLs\n  config.assets.digest = true\n\n  # Defaults to Rails.root.join(\"public/assets\")\n  # config.assets.manifest = YOUR_PATH\n\n  # Specifies the header that your server uses for sending files\n  # config.action_dispatch.x_sendfile_header = \"X-Sendfile\" # for apache\n  # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx\n\n  client = Dalli::Client.new(ENV[\"MEMCACHIER_SERVERS\"], {:username => ENV[\"MEMCACHIER_USERNAME\"], :password => ENV[\"MEMCACHIER_PASSWORD\"], :value_max_bytes => 10485760} )\n  config.action_dispatch.rack_cache = {\n    :metastore    => client,\n    :entitystore  => client,\n    :allow_reload => false\n  }\n\n  # Serve pre-gzipped static assets\n  config.middleware.insert_after 'Rack::Cache', 'CompressedStaticAssets', paths[\"public\"].first, config.assets.prefix, config.static_cache_control\n\n  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n  # config.force_ssl = true\n\n  # See everything in the log (default is :info)\n  # config.log_level = :debug\n\n  # Use a different logger for distributed setups\n  # config.logger = SyslogLogger.new\n\n  # Use a different cache store in production\n  # config.cache_store = :mem_cache_store\n\n  # Enable serving of images, stylesheets, and JavaScripts from an asset server\n  # config.action_controller.asset_host = \"http://assets.example.com\"\n\n  # Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)\n  # config.assets.precompile += %w( search.js )\n\n  # Disable delivery errors, bad email addresses will be ignored\n  config.action_mailer.raise_delivery_errors = false\n\n  # Enable threaded mode\n  # config.threadsafe!\n\n  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to\n  # the I18n.default_locale when a translation can not be found)\n  config.i18n.fallbacks = true\n\n  # Send deprecation notices to registered listeners\n  config.active_support.deprecation = :notify\n\n  # Redirects to https://secure.example.com instead of the default\n  # https://www.example.com.\n  config.after_initialize do\n    SslRequirement.ssl_host = 'beta.runrun.it'\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[32,34],[32,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":48,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"oldRange":[[32,0],[32,2]],"newRange":[[32,0],[32,0]],"oldText":"  ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/zeke/code/support/runrunitstg/config/environments/beta.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d4f527d3db5732758c5200f905811539e170b7d1","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrap":false,"editorWidthInChars":121,"scrollTop":398,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zeke/code/support/runrunitstg/config/environments/beta.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/zeke/code/support/runrunitstg/config/environments/beta.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"projectViewState":{"findHistory":["dalli"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/zeke/code/support/runrunitstg/config/environments/beta.rb":1400088977996},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1238058},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/zeke/code/support/runrunitstg/config","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}
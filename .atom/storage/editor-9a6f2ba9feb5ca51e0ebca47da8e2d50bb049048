{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/zeke/code/forks/composer","buffers":[{"text":"# Introduction\n\nComposer is a tool for dependency management in PHP. It allows you to declare\nthe dependent libraries your project needs and it will install them in your\nproject for you.\n\n## Dependency management\n\nComposer is not a package manager. Yes, it deals with \"packages\" or libraries, but\nit manages them on a per-project basis, installing them in a directory (e.g. `vendor`)\ninside your project. By default it will never install anything globally. Thus,\nit is a dependency manager.\n\nThis idea is not new and Composer is strongly inspired by node's [npm](http://npmjs.org/)\nand ruby's [bundler](http://gembundler.com/). But there has not been such a tool\nfor PHP.\n\nThe problem that Composer solves is this:\n\na) You have a project that depends on a number of libraries.\n\nb) Some of those libraries depend on other libraries.\n\nc) You declare the things you depend on.\n\nd) Composer finds out which versions of which packages need to be installed, and\n   installs them (meaning it downloads them into your project).\n\n## Declaring dependencies\n\nLet's say you are creating a project, and you need a library that does logging.\nYou decide to use [monolog](https://github.com/Seldaek/monolog). In order to\nadd it to your project, all you need to do is create a `composer.json` file\nwhich describes the project's dependencies.\n\n    {\n        \"require\": {\n            \"monolog/monolog\": \"1.2.*\"\n        }\n    }\n\nWe are simply stating that our project requires some `monolog/monolog` package,\nany version beginning with `1.2`.\n\n## System Requirements\n\nComposer requires PHP 5.3.2+ to run. A few sensitive php settings and compile\nflags are also required, but the installer will warn you about any\nincompatibilities.\n\nTo install packages from sources instead of simple zip archives, you will need\ngit, svn or hg depending on how the package is version-controlled.\n\nComposer is multi-platform and we strive to make it run equally well on Windows,\nLinux and OSX.\n\n## Installation - *nix\n\n### Downloading the Composer Executable\n\n#### Locally\n\nTo actually get Composer, we need to do two things. The first one is installing\nComposer (again, this means downloading it into your project):\n\n    $ curl -sS https://getcomposer.org/installer | php\n\nThis will just check a few PHP settings and then download `composer.phar` to\nyour working directory. This file is the Composer binary. It is a PHAR (PHP\narchive), which is an archive format for PHP which can be run on the command\nline, amongst other things.\n\nYou can install Composer to a specific directory by using the `--install-dir`\noption and providing a target directory (it can be an absolute or relative path):\n\n    $ curl -sS https://getcomposer.org/installer | php -- --install-dir=bin\n\n#### Globally\n\nYou can place this file anywhere you wish. If you put it in your `PATH`,\nyou can access it globally. On unixy systems you can even make it\nexecutable and invoke it without `php`.\n\nYou can run these commands to easily access `composer` from anywhere on your system:\n\n    $ curl -sS https://getcomposer.org/installer | php\n    $ mv composer.phar /usr/local/bin/composer\n\n> **Note:** If the above fails due to permissions, run the `mv` line\n> again with sudo.\n\nThen, just run `composer` in order to run Composer instead of `php composer.phar`.\n\n#### Globally (on OSX via homebrew)\n\nComposer is part of the homebrew-php project.\n\n```sh\nbrew update\nbrew tap josegonzalez/homebrew-php\nbrew tap homebrew/versions\nbrew install php55-intl\nbrew install josegonzalez/php/composer\n```\n\n## Installation - Windows\n\n### Using the Installer\n\nThis is the easiest way to get Composer set up on your machine.\n\nDownload and run [Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe),\nit will install the latest Composer version and set up your PATH so that you can\njust call `composer` from any directory in your command line.\n\n### Manual Installation\n\nChange to a directory on your `PATH` and run the install snippet to download\ncomposer.phar:\n\n    C:\\Users\\username>cd C:\\bin\n    C:\\bin>php -r \"readfile('https://getcomposer.org/installer');\" | php\n\n> **Note:** If the above fails due to readfile, use the `http` url or enable php_openssl.dll in php.ini\n\nCreate a new `composer.bat` file alongside `composer.phar`:\n\n    C:\\bin>echo @php \"%~dp0composer.phar\" %*>composer.bat\n\nClose your current terminal. Test usage with a new terminal:\n\n    C:\\Users\\username>composer -V\n    Composer version 27d8904\n\n    C:\\Users\\username>\n\n## Using Composer\n\nWe will now use Composer to install the dependencies of the project. If you\ndon't have a `composer.json` file in the current directory please skip to the\n[Basic Usage](01-basic-usage.md) chapter.\n\nTo resolve and download dependencies, run the `install` command:\n\n    $ php composer.phar install\n\nIf you did a global install and do not have the phar in that directory\nrun this instead:\n\n    $ composer install\n\nFollowing the [example above](#declaring-dependencies), this will download\nmonolog into the `vendor/monolog/monolog` directory.\n\n## Autoloading\n\nBesides downloading the library, Composer also prepares an autoload file that's\ncapable of autoloading all of the classes in any of the libraries that it\ndownloads. To use it, just add the following line to your code's bootstrap\nprocess:\n\n    require 'vendor/autoload.php';\n\nWoah! Now start using monolog! To keep learning more about Composer, keep\nreading the \"Basic Usage\" chapter.\n\n[Basic Usage](01-basic-usage.md) &rarr;\n","markers":{"markers":{"1":{"id":1,"range":[[101,23],[101,23]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":22,"goalBufferRange":null,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[101,17],[101,18]]},"newParams":{"tailed":false,"range":[[101,17],[101,17]]},"deserializer":"MarkerPatch"},{"oldRange":[[101,17],[101,18]],"newRange":[[101,17],[101,18]],"oldText":"3","newText":"5","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[101,17],[101,17]]},"newParams":{"range":[[101,18],[101,18]]},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zeke/code/forks/composer/doc/00-intro.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3abcfe2f43a91dd76744536e665307cde5f56d8e","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":22,"softTabs":true,"scrollTop":2044,"scrollLeft":0,"displayBuffer":{"id":23,"softWrap":false,"editorWidthInChars":110,"tokenizedBuffer":{"bufferPath":"/Users/zeke/code/forks/composer/doc/00-intro.md","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/zeke/code/forks/composer/doc/00-intro.md","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/zeke/code/forks/composer/doc/00-intro.md":1396383107886},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1271249},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/zeke/code/forks/composer/doc","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":["homebrew","53"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}